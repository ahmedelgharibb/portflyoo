name: Create New Website Instance

on:
  workflow_dispatch:
    inputs:
      folder_name:
        description: 'Folder name for the new website (alphanumeric, hyphens and underscores only)'
        required: true
        type: string
      site_name:
        description: 'Display name for the website'
        required: true
        type: string

jobs:
  create-website:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Validate folder name
        id: validate
        run: |
          folder_name="${{ github.event.inputs.folder_name }}"
          if [[ ! $folder_name =~ ^[a-zA-Z0-9_-]+$ ]]; then
            echo "Error: Folder name must contain only letters, numbers, hyphens and underscores"
            exit 1
          fi
          
          if [ -d "teacher/$folder_name" ]; then
            echo "Error: Folder 'teacher/$folder_name' already exists"
            exit 1
          fi
          
          echo "folder_name=$folder_name" >> $GITHUB_OUTPUT
          echo "site_url=https://portflyo-new.vercel.app/teacher/$folder_name/index.html" >> $GITHUB_OUTPUT
      
      - name: Create new website folder
        run: |
          folder_name="${{ steps.validate.outputs.folder_name }}"
          mkdir -p "teacher/$folder_name"
          cp -r teacher/edit-template/* "teacher/$folder_name/"
          echo "Created new website folder: teacher/$folder_name"
      
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Install dependencies
        run: npm install @supabase/supabase-js
      
      - name: Register website in database
        id: register
        run: |
          folder_name="${{ steps.validate.outputs.folder_name }}"
          site_name="${{ github.event.inputs.site_name }}"
          site_url="${{ steps.validate.outputs.site_url }}"
          
          cat > register-site.js << 'EOL'
          const { createClient } = require('@supabase/supabase-js');
          
          const SUPABASE_URL = 'https://bqpchhitrbyfleqpyydz.supabase.co';
          const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJxcGNoaGl0cmJ5ZmxlcXB5eWR6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM0NTU4ODgsImV4cCI6MjA1OTAzMTg4OH0.Yworu_EPLewJJGBFnW5W7GUsNZIONc3qOEJMTwJMzzQ';
          
          async function registerWebsite() {
            // Redirect logs to stderr so they don't interfere with JSON output
            const log = (message) => console.error(message);
            
            log('Connecting to Supabase...');
            const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
            
            const folderName = process.argv[2];
            const siteName = process.argv[3];
            const siteUrl = process.argv[4];
            
            log(`Registering website: ${siteName} (${folderName}) at ${siteUrl}`);
            
            try {
              // Check if tables exist
              log('Verifying database tables...');
              try {
                // Check websites table
                const { count: websitesCount, error: websitesCheckError } = await supabase
                  .from('websites')
                  .select('*', { count: 'exact', head: true });
                
                if (websitesCheckError) {
                  console.error('Error checking websites table:', websitesCheckError.message);
                  throw new Error(`Error checking websites table: ${websitesCheckError.message}. Please run the SQL script manually to create the table.`);
                } else {
                  log('Websites table verified');
                }
                
                // Check site_data table
                const { data: site_data_test, error: siteDataCheckError } = await supabase
                  .from('site_data')
                  .select('*', { count: 'exact', head: true });
                
                if (siteDataCheckError) {
                  console.error('Error checking site_data table:', siteDataCheckError.message);
                  throw new Error(`Error checking site_data table: ${siteDataCheckError.message}`);
                } else {
                  log('Site_data table verified');
                }
              } catch (checkError) {
                console.error('Database table verification failed:', checkError.message);
                throw checkError;
              }
              
              // Insert the website record
              log('Inserting website record...');
              const { data: website, error: websiteError } = await supabase
                .from('websites')
                .insert({
                  site_name: siteName,
                  site_url: siteUrl,
                  folder_name: folderName
                })
                .select()
                .single();
              
              if (websiteError) {
                console.error('Error inserting website:', websiteError.message);
                throw websiteError;
              }
              
              if (!website) {
                console.error('No website data returned after insert');
                throw new Error('Failed to create website record');
              }
              
              // Get template data
              const { data: templateWebsite, error: templateError } = await supabase
                .from('websites')
                .select('id')
                .eq('site_name', 'Default Template')
                .maybeSingle();
              
              if (templateError) {
                console.error('Error fetching template website:', templateError.message);
              }
              
              let templateData = null;
              
              if (templateWebsite) {
                // Note: We're not using website_id here since it might not exist
                const { data: templateSiteData, error: dataError } = await supabase
                  .from('site_data')
                  .select('*')
                  .eq('id', 1) // Assuming template data is at ID 1, adjust as needed
                  .maybeSingle();
                
                if (dataError) {
                  console.error('Error fetching template site data:', dataError.message);
                }
                
                if (templateSiteData) {
                  templateData = templateSiteData.data;
                }
              }
              
              // If no template data, use default
              if (!templateData) {
                log('Using default template data as no template found');
                templateData = {
                  "theme": {
                    "mode": "light",
                    "color": "blue"
                  },
                  "contact": {
                    "email": "",
                    "phone": "",
                    "formUrl": "",
                    "contactMessage": "",
                    "assistantFormUrl": ""
                  },
                  "results": [
                    {"name": "Mathematics", "score": 85},
                    {"name": "Physics", "score": 78},
                    {"name": "Chemistry", "score": 82},
                    {"name": "Biology", "score": 75}
                  ],
                  "personal": {
                    "name": "Teacher Name",
                    "title": "Mathematics Educator",
                    "subtitle": "Math Teacher",
                    "experience": "10+ years of teaching experience",
                    "philosophy": "I believe in creating an engaging learning environment where students can develop their mathematical thinking skills.",
                    "heroHeading": "Inspiring Minds Through Mathematics",
                    "qualifications": [
                      "Ph.D. in Mathematics Education",
                      "Master's in Applied Mathematics",
                      "Bachelor's in Mathematics"
                    ]
                  },
                  "experience": {
                    "centers": [],
                    "schools": [],
                    "platforms": []
                  },
                  "heroImage": ""
                };
              }
              
              // Insert the site data
              log('Inserting site data...');
              
              // Insert with a simpler approach
              try {
                // Generate a sequential ID based on timestamp to avoid conflicts
                const timestamp = Date.now();
                
                // First try with an explicit ID
                log('Inserting site data with explicit ID...');
                const { data: siteData, error: siteDataError } = await supabase
                  .from('site_data')
                  .insert({ 
                    id: timestamp, // Provide explicit ID since it's a NOT NULL column
                    data: templateData,
                    website_id: website.id // Still include this in case the column exists
                  })
                  .select();
                
                if (siteDataError) {
                  console.error('Error inserting site data with ID:', siteDataError.message);
                  
                  // Try alternative approach without website_id but still with ID
                  log('Trying alternative approach without website_id...');
                  const { data: altSiteData, error: altSiteDataError } = await supabase
                    .from('site_data')
                    .insert({ 
                      id: timestamp + 1, // Use different ID to avoid conflict
                      data: templateData 
                    })
                    .select();
                  
                  if (altSiteDataError) {
                    console.error('Alternative approach also failed:', altSiteDataError.message);
                    throw altSiteDataError;
                  } else {
                    log('Successfully inserted site data using alternative approach');
                  }
                } else {
                  log('Successfully inserted site data');
                }
              } catch (insertError) {
                console.error('Failed to insert site data:', insertError.message);
                throw new Error(`Failed to insert site data: ${insertError.message}`);
              }
              
              // Generate site-config.js content
              const configContent = 
                '/**\n' +
                ' * site-config.js\n' +
                ' * This file contains configuration specific to this website instance.\n' +
                ' * It is automatically generated by GitHub Actions on: ' + new Date().toISOString() + '\n' +
                ' */\n\n' +
                'const siteConfig = {\n' +
                '    // Website ID from the database\n' +
                '    websiteId: "' + website.id + '",\n\n' +
                '    // Site name\n' +
                '    siteName: "' + siteName + '",\n\n' +
                '    // Site URL\n' +
                '    siteUrl: "' + siteUrl + '",\n\n' +
                '    // Folder name\n' +
                '    folderName: "' + folderName + '",\n\n' +
                '    // Created timestamp\n' +
                '    createdAt: "' + website.created_at + '"\n' +
                '};\n\n' +
                'export default siteConfig;';
              
              // Only output the JSON to stdout, all logs go to stderr
              console.log(JSON.stringify({
                websiteId: website.id,
                siteName: siteName,
                siteUrl: siteUrl,
                folderName: folderName,
                configContent: configContent
              }));
              
            } catch (error) {
              console.error('Error:', error.message || 'Unknown error occurred');
              console.error(error.stack || 'No stack trace available');
              process.exit(1);
            }
          }
          
          registerWebsite();
          EOL
          
          echo "Running website registration script..."
          # Redirect stderr to capture logging separately from the JSON output
          if ! result=$(node register-site.js "$folder_name" "$site_name" "$site_url" 2>registration.log); then
            cat registration.log
            echo "::error::Failed to register website in database. See error above."
            exit 1
          fi
          
          # Show the logs from the registration process
          cat registration.log
          
          echo "Processing registration result..."
          
          # Make sure result is valid JSON before proceeding
          if [[ -z "$result" ]]; then
            echo "::error::Empty result from registration script"
            exit 1
          fi
          
          if ! echo "$result" | jq . > /dev/null 2>&1; then
            echo "::error::Invalid JSON result: $result"
            exit 1
          fi
          
          # Extract the config content
          config_content=$(echo $result | jq -r '.configContent')
          website_id=$(echo $result | jq -r '.websiteId')
          
          if [[ -z "$website_id" || "$website_id" == "null" ]]; then
            echo "::error::Failed to get website ID from registration result"
            exit 1
          fi
          
          # Write the site-config.js file
          echo "$config_content" > "teacher/$folder_name/site-config.js"
          
          # Output the website URL
          echo "website_id=$website_id" >> $GITHUB_OUTPUT
          echo "site_url=$site_url" >> $GITHUB_OUTPUT
      
      - name: Commit and push changes
        run: |
          folder_name="${{ steps.validate.outputs.folder_name }}"
          site_url="${{ steps.validate.outputs.site_url }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add "teacher/$folder_name"
          git commit -m "feat: create new website instance for $folder_name"
          
          # Push using the GitHub token for authentication
          git push https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
      
      - name: Website Created
        run: |
          echo "✅ New website created successfully!"
          echo "Website ID: ${{ steps.register.outputs.website_id }}"
          echo "Website URL: ${{ steps.register.outputs.site_url }}"
          echo ""
          echo "You can access your new website at:"
          echo "${{ steps.register.outputs.site_url }}" 